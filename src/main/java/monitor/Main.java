package monitor;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.nio.file.Paths;
import org.getopentest.events.EventMonitor;
import org.getopentest.events.ISessionEventsListener;
import org.getopentest.events.Subtest;
import org.getopentest.events.Test;
import org.getopentest.events.TestAction;
import org.getopentest.events.TestSession;

public class Main {

    private static String serverUrl;

    public static void main(String[] args) {
        // Check if the OpenTest server URL was passed as argument
        if (args.length == 1) {
            serverUrl = curateUrl(args[0]);
        } else {
            serverUrl = "http://localhost:3000";
        }

        System.out.println(String.format("Monitoring server %s...", serverUrl));

        EventMonitor monitor = new EventMonitor(serverUrl);
        monitor.addListener(new ISessionEventsListener() {
            @Override
            public void onSessionCompleted(TestSession session) {
                System.out.println(String.format("Test session completed: %s (ID %s)",
                        session.label, session.id));
                System.out.println("Test counts:");
                System.out.println(String.format("* total: %s", session.testCounts.total));
                System.out.println(String.format("* passed: %s", session.testCounts.passed));
                System.out.println(String.format("* failed: %s", session.testCounts.failed));
                System.out.println();

                // Download the screenshots for all the actions executed, in the
                // "screenshots" directory. For data-driven tests, we loop
                // through all their iterations (also called subtests).
                for (Test test : session.tests) {
                    if (test.isDataDriven) {
                        for (Subtest subtest : test.subtests) {
                            downloadAllScreenshots(subtest, "screenshots");
                        }
                    } else {
                        downloadAllScreenshots(test, "screenshots");
                    }
                }

                // Dowload log data in the "logs" directory
                downloadTestSessionLog(session.id, "logs");

                // TO DO: call the APIs to write the data to a database (for
                // analytics), or to a specialized reporting solution.
            }

            @Override
            public void onSessionStarted(TestSession session) {
                // Nothing to do here
            }
        });
        monitor.start();
    }

    /**
     * Remove spaces around the URL and trailing forward slash characters.
     */
    private static String curateUrl(String url) {
        return url.trim().replaceAll("(\\/)+$", "");
    }

    /**
     * Download the screenshots for all actions in a test or one iteration of a
     * data-driven test.
     */
    private static void downloadAllScreenshots(Subtest subtest, String targetDirectory) {
        for (TestAction action : subtest.actions) {
            if (action.screenshot != null) {
                downloadScreenshot(action.screenshot, targetDirectory);
            }
        }
    }

    /**
     * Download a single screenshot to the specified directory.
     */
    private static void downloadScreenshot(String screenshotFileName, String targetDirectory) {
        try {
            String urlStr = serverUrl + "/api/screenshot/" + screenshotFileName;
            URL url = new URL(urlStr);
            File outputfile = Paths.get(targetDirectory, screenshotFileName).toFile();
            outputfile.getParentFile().mkdirs();
            OutputStream outStream = new FileOutputStream(outputfile);
            InputStream inStream = url.openStream();

            byte[] buffer = new byte[1024];
            int len;
            while ((len = inStream.read(buffer)) != -1) {
                outStream.write(buffer, 0, len);
            }

            inStream.close();
            outStream.close();
        } catch (Exception exc) {
            System.out.println(String.format("Failed downloading screenshot %s to %s", screenshotFileName, targetDirectory));
        }
    }

    /**
     * Download the log content for the specified session ID.
     */
    private static void downloadTestSessionLog(String sessionId, String targetDirectory) {
        try {
            String urlStr = serverUrl + "/api/session/" + sessionId + "/log?format=pretty";
            URL url = new URL(urlStr);
            File outputfile = Paths.get(targetDirectory, sessionId + ".log").toFile();
            outputfile.getParentFile().mkdirs();
            OutputStream outStream = new FileOutputStream(outputfile);
            InputStream inStream = url.openStream();

            byte[] buffer = new byte[1024];
            int len;
            while ((len = inStream.read(buffer)) != -1) {
                outStream.write(buffer, 0, len);
            }

            inStream.close();
            outStream.close();
        } catch (Exception exc) {
            System.out.println(String.format("Failed downloading log data for session %s to %s", sessionId, targetDirectory));
        }
    }
}
