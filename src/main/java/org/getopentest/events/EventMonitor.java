package org.getopentest.events;

import com.google.gson.Gson;
import io.socket.client.IO;
import io.socket.client.Socket;
import java.io.InputStreamReader;
import java.net.URI;
import java.util.ArrayList;
import org.json.JSONObject;

public class EventMonitor {

    private ArrayList<ISessionEventsListener> listeners;

    private static String syncServerUrl;

    public EventMonitor() {
        this("http://localhost:3000");
    }

    public EventMonitor(String syncServerUrl) {
        this.listeners = new ArrayList<ISessionEventsListener>();
        this.syncServerUrl = curateUrl(syncServerUrl);
    }

    public void addListener(ISessionEventsListener listener) {
        if (!listeners.contains(listener)) {
            listeners.add(listener);
        }
    }

    /**
     * Remove spaces around the URL as well as trailing forward slash chars.
     */
    private static String curateUrl(String url) {
        return url.trim().replaceAll("(\\/)+$", "");
    }

    /**
     *
     * Get the test session information for the specified session ID from the
     * OpenTest server.
     */
    private TestSession getTestSessionInfo(String sessionId) throws Exception {
        URI uri = new URI(syncServerUrl + "/api/session/" + sessionId);
        Gson gson = new Gson();
        return gson.fromJson(new InputStreamReader(uri.toURL().openStream()), TestSession.class);
    }

    /**
     * Start monitoring the OpenTest server for events.
     */
    public void start() {
        try {
            Socket webSocket = IO.socket(this.syncServerUrl + "/session-status");
            webSocket.on("status-changed", (Object... args) -> {
                try {
                    JSONObject eventPayload = (JSONObject) args[0];
                    String sessionId = eventPayload.get("sessionId").toString();
                    String newStatus = eventPayload.get("newStatus").toString();

                    for (Object listener : listeners) {
                        if (listener instanceof ISessionEventsListener) {
                            try {
                                TestSession session = getTestSessionInfo(sessionId);
                                if (newStatus.equals("started")) {
                                    ((ISessionEventsListener) listener).onSessionStarted(session);
                                } else if (newStatus.equals("completed")) {
                                    ((ISessionEventsListener) listener).onSessionCompleted(session);
                                }
                            } catch (Exception exc) {
                            }
                        }
                    }
                } catch (Exception ex) {
                    System.out.println(String.format(
                            "ERROR: Failed getting session details and building the execution report. %s: %s",
                            ex.getClass().getName(),
                            ex.getMessage()));
                }
            });
            webSocket.connect();
        } catch (Exception ex) {
            System.out.println(String.format(
                    "ERROR: Failed establishing WebSocket connection. %s: %s",
                    ex.getClass().getName(),
                    ex.getMessage()));
        }
    }

    public boolean removeListener(ISessionEventsListener listener) {
        return listeners.remove(listener);
    }

}
